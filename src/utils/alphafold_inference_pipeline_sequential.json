{
  "pipelineSpec": {
    "components": {
      "comp-configure-run": {
        "executorLabel": "exec-configure-run",
        "inputDefinitions": {
          "parameters": {
            "model_preset": {
              "type": "STRING"
            },
            "num_multimer_predictions_per_model": {
              "type": "INT"
            },
            "sequence_path": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "sequence": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "model_runners": {
              "type": "STRING"
            },
            "num_ensemble": {
              "type": "INT"
            },
            "run_multimer_system": {
              "type": "STRING"
            },
            "sequence_path": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-data-pipeline": {
        "executorLabel": "exec-data-pipeline",
        "inputDefinitions": {
          "artifacts": {
            "ref_databases": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "sequence": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "base_output_directory": {
              "type": "STRING"
            },
            "display_name": {
              "type": "STRING"
            },
            "enable_web_access": {
              "type": "STRING"
            },
            "encryption_spec_key_name": {
              "type": "STRING"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "max_template_date": {
              "type": "STRING"
            },
            "network": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "reserved_ip_ranges": {
              "type": "STRING"
            },
            "restart_job_on_worker_restart": {
              "type": "STRING"
            },
            "run_multimer_system": {
              "type": "STRING"
            },
            "service_account": {
              "type": "STRING"
            },
            "tensorboard": {
              "type": "STRING"
            },
            "timeout": {
              "type": "STRING"
            },
            "use_small_bfd": {
              "type": "STRING"
            },
            "worker_pool_specs": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "features": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "msas": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "gcp_resources": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-importer": {
        "executorLabel": "exec-importer",
        "inputDefinitions": {
          "parameters": {
            "uri": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "artifact": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-importer-2": {
        "executorLabel": "exec-importer-2",
        "inputDefinitions": {
          "parameters": {
            "uri": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "artifact": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-predict-relax": {
        "executorLabel": "exec-predict-relax",
        "inputDefinitions": {
          "artifacts": {
            "model_features": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "model_params": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "num_ensemble": {
              "type": "INT"
            },
            "prediction_runners": {
              "type": "STRING"
            },
            "run_multimer_system": {
              "type": "STRING"
            },
            "run_relax": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "raw_predictions": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "relaxed_proteins": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "unrelaxed_proteins": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-configure-run": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "configure_run"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.13' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef configure_run(\n    sequence_path: str,\n    model_preset: str,\n    sequence: Output[Artifact],\n    random_seed: int = None,\n    num_multimer_predictions_per_model: int = 5,\n) -> NamedTuple(\n    'ConfigureRunOutputs',\n    [\n        ('sequence_path', str),\n        ('model_runners', list),\n        ('run_multimer_system', bool),\n        ('num_ensemble', int),\n    ]\n):\n  \"\"\"Configures a pipeline run.\"\"\"\n\n  import random\n  import sys\n  from collections import namedtuple\n  from alphafold.data import parsers\n  from alphafold.model import config\n  from google.cloud import storage\n\n  run_multimer_system = 'multimer' == model_preset\n  num_ensemble = 8 if model_preset == 'monomer_casp14' else 1\n  num_predictions_per_model = num_multimer_predictions_per_model if model_preset == 'multimer' else 1\n\n  client = storage.Client()\n  sequence.uri = f'{sequence.uri}.fasta'\n  with open(sequence.path, 'wb') as f:\n    client.download_blob_to_file(sequence_path, f)\n\n  with open(sequence.path) as f:\n    sequence_str = f.read()\n  seqs, seq_descs = parsers.parse_fasta(sequence_str)\n\n  if len(seqs) != 1 and model_preset != 'multimer':\n    raise ValueError(\n        f'More than one sequence found in {sequence_path}.',\n        'Unsupported for monomer predictions.')\n\n  models = config.MODEL_PRESETS[model_preset]\n  if random_seed is None:\n    random_seed = random.randrange(\n        sys.maxsize // (len(models) * num_multimer_predictions_per_model)\n    )\n\n  model_runners = []\n  for model_name in models:\n    for i in range(num_predictions_per_model):\n      model_runners.append({\n          'prediction_index': i,\n          'model_name': model_name,\n          'random_seed': random_seed\n      })\n      random_seed += 1\n\n  sequence.metadata['category'] = 'sequence'\n  sequence.metadata['description'] = seq_descs\n  sequence.metadata['num_residues'] = [len(seq) for seq in seqs]\n\n  output = namedtuple('ConfigureRunOutputs',\n                      ['sequence_path', 'model_runners',\n                       'run_multimer_system', 'num_ensemble'])\n\n  return output(sequence.path, model_runners, run_multimer_system, num_ensemble)\n\n"
            ],
            "image": "gcr.io/jk-mlops-dev/alphafold-components"
          }
        },
        "exec-data-pipeline": {
          "container": {
            "args": [
              "--type",
              "CustomJob",
              "--payload",
              "{\"display_name\": \"{{$.inputs.parameters['display_name']}}\", \"job_spec\": {\"worker_pool_specs\": {{$.inputs.parameters['worker_pool_specs']}}, \"scheduling\": {\"timeout\": \"{{$.inputs.parameters['timeout']}}\", \"restart_job_on_worker_restart\": \"{{$.inputs.parameters['restart_job_on_worker_restart']}}\"}, \"service_account\": \"{{$.inputs.parameters['service_account']}}\", \"tensorboard\": \"{{$.inputs.parameters['tensorboard']}}\", \"enable_web_access\": \"{{$.inputs.parameters['enable_web_access']}}\", \"network\": \"{{$.inputs.parameters['network']}}\", \"reserved_ip_ranges\": {{$.inputs.parameters['reserved_ip_ranges']}}, \"base_output_directory\": {\"output_uri_prefix\": \"{{$.inputs.parameters['base_output_directory']}}\"}}, \"labels\": {{$.inputs.parameters['labels']}}, \"encryption_spec\": {\"kms_key_name\":\"{{$.inputs.parameters['encryption_spec_key_name']}}\"}}",
              "--project",
              "{{$.inputs.parameters['project']}}",
              "--location",
              "{{$.inputs.parameters['location']}}",
              "--gcp_resources",
              "{{$.outputs.parameters['gcp_resources'].output_file}}"
            ],
            "command": [
              "python3",
              "-u",
              "-m",
              "google_cloud_pipeline_components.container.v1.gcp_launcher.launcher"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.21"
          }
        },
        "exec-importer": {
          "importer": {
            "artifactUri": {
              "constantValue": {
                "stringValue": "gs://jk-af-dev-bucket"
              }
            },
            "typeSchema": {
              "schemaTitle": "system.Artifact",
              "schemaVersion": "0.0.1"
            }
          }
        },
        "exec-importer-2": {
          "importer": {
            "artifactUri": {
              "constantValue": {
                "stringValue": "/mnt/nfs/alphafold"
              }
            },
            "metadata": {
              "bfd": "bfd/bfd_metaclust_clu_complete_id30_c90_final_seq.sorted_opt",
              "mgnify": "mgnify/mgy_clusters_2018_12.fa",
              "pdb70": "pdb70/pdb70",
              "pdb_mmcif": "pdb_mmcif/mmcif_files",
              "pdb_obsolete": "pdb_mmcif/obsolete.dat",
              "pdb_seqres": "pdb_seqres/pdb_seqres.txt",
              "small_bfd": "small_bfd/bfd-first_non_consensus_sequences.fasta",
              "uniclust30": "uniclust30/uniclust30_2018_08/uniclust30_2018_08",
              "uniprot": "uniprot/uniprot.fasta",
              "uniref90": "uniref90/uniref90.fasta"
            },
            "typeSchema": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          }
        },
        "exec-predict-relax": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "predict_relax"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.13' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef predict_relax(\n    model_features: Input[Artifact],\n    model_params: Input[Artifact],\n    prediction_runners: list,\n    num_ensemble: int,\n    run_multimer_system: bool,\n    run_relax: bool,\n    raw_predictions: Output[Artifact],\n    unrelaxed_proteins: Output[Artifact],\n    relaxed_proteins: Output[Artifact],\n):\n  \"\"\"Runs AlphaFold predictions and (optionally) relaxations.\"\"\"\n\n  import json\n  import logging\n  import os\n  import time\n\n  from alphafold_utils import predict_relax as alphafold_predict_relax\n\n  os.makedirs(raw_predictions.path, exist_ok=True)\n  os.makedirs(unrelaxed_proteins.path, exist_ok=True)\n  os.makedirs(relaxed_proteins.path, exist_ok=True)\n\n  logging.info(f'Starting predictions on {prediction_runners} ...')\n  t0 = time.time()\n\n  ranking_confidences = alphafold_predict_relax(\n      model_features_path=model_features.path,\n      model_params_path=model_params.path,\n      prediction_runners=prediction_runners,\n      num_ensemble=num_ensemble,\n      run_multimer_system=run_multimer_system,\n      run_relax=run_relax,\n      raw_prediction_path=raw_predictions.path,\n      unrelaxed_protein_path=unrelaxed_proteins.path,\n      relaxed_protein_path=relaxed_proteins.path,\n  )\n\n  raw_predictions.metadata['category'] = 'raw_predictions'\n  raw_predictions.metadata['ranking_confidences'] = json.dumps(ranking_confidences)\n  unrelaxed_proteins.metadata['category'] = 'unrelaxed_proteins'\n  relaxed_proteins.metadata['category'] = 'relaxed_proteins'\n\n  t1 = time.time()\n  logging.info(f'Model predictions completed. Elapsed time: {t1-t0}')\n\n"
            ],
            "env": [
              {
                "name": "TF_FORCE_UNIFIED_MEMORY",
                "value": "1"
              },
              {
                "name": "XLA_PYTHON_CLIENT_MEM_FRACTION",
                "value": "4.0"
              }
            ],
            "image": "gcr.io/jk-mlops-dev/alphafold-components",
            "resources": {
              "accelerator": {
                "count": "1",
                "type": "NVIDIA_TESLA_A100"
              },
              "cpuLimit": 12.0,
              "memoryLimit": 8.5e-08
            }
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "alphafold-inference-pipeline"
    },
    "root": {
      "dag": {
        "tasks": {
          "configure-run": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-configure-run"
            },
            "inputs": {
              "parameters": {
                "model_preset": {
                  "componentInputParameter": "model_preset"
                },
                "num_multimer_predictions_per_model": {
                  "componentInputParameter": "num_multimer_predictions_per_model"
                },
                "sequence_path": {
                  "componentInputParameter": "sequence_path"
                }
              }
            },
            "taskInfo": {
              "name": "Configure Pipeline Run"
            }
          },
          "data-pipeline": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-data-pipeline"
            },
            "dependentTasks": [
              "configure-run",
              "importer-2"
            ],
            "inputs": {
              "artifacts": {
                "ref_databases": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "artifact",
                    "producerTask": "importer-2"
                  }
                },
                "sequence": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "sequence",
                    "producerTask": "configure-run"
                  }
                }
              },
              "parameters": {
                "base_output_directory": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": ""
                    }
                  }
                },
                "display_name": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "Data Pipeline"
                    }
                  }
                },
                "enable_web_access": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "false"
                    }
                  }
                },
                "encryption_spec_key_name": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": ""
                    }
                  }
                },
                "labels": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "{}"
                    }
                  }
                },
                "location": {
                  "componentInputParameter": "region"
                },
                "max_template_date": {
                  "componentInputParameter": "max_template_date"
                },
                "network": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "projects/895222332033/global/networks/jk-af-dev-network"
                    }
                  }
                },
                "project": {
                  "componentInputParameter": "project"
                },
                "reserved_ip_ranges": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[]"
                    }
                  }
                },
                "restart_job_on_worker_restart": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "false"
                    }
                  }
                },
                "run_multimer_system": {
                  "taskOutputParameter": {
                    "outputParameterKey": "run_multimer_system",
                    "producerTask": "configure-run"
                  }
                },
                "service_account": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": ""
                    }
                  }
                },
                "tensorboard": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": ""
                    }
                  }
                },
                "timeout": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "604800s"
                    }
                  }
                },
                "use_small_bfd": {
                  "componentInputParameter": "use_small_bfd"
                },
                "worker_pool_specs": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[{\"machine_spec\": {\"machine_type\": \"c2-standard-16\"}, \"replica_count\": 1, \"container_spec\": {\"image_uri\": \"gcr.io/jk-mlops-dev/alphafold-components\", \"command\": [\"sh\", \"-c\", \"\\nif ! [ -x \\\"$(command -v pip)\\\" ]; then\\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\\nfi\\n\\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.13' && \\\"$0\\\" \\\"$@\\\"\\n\", \"sh\", \"-ec\", \"program_path=$(mktemp -d)\\nprintf \\\"%s\\\" \\\"$0\\\" > \\\"$program_path/ephemeral_component.py\\\"\\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \\\"$program_path/ephemeral_component.py\\\"                         \\\"$@\\\"\\n\", \"\\nimport kfp\\nfrom kfp.v2 import dsl\\nfrom kfp.v2.dsl import *\\nfrom typing import *\\n\\ndef data_pipeline(\\n    sequence: Input[Artifact],\\n    ref_databases: Input[Artifact],\\n    run_multimer_system: bool,\\n    use_small_bfd: bool,\\n    max_template_date: str,\\n    msas: Output[Artifact],\\n    features: Output[Artifact]\\n):\\n  \\\"\\\"\\\"Configures and runs AlphaFold data pipelines.\\\"\\\"\\\"\\n\\n  import logging\\n  import os\\n  import time\\n\\n  from alphafold_utils import run_data_pipeline\\n\\n  logging.info(f'Starting {\\\"multimer\\\" if run_multimer_system else \\\"monomer\\\"} AlphaFold data pipeline')\\n  t0 = time.time()\\n\\n  mount_path = ref_databases.uri\\n  uniref90_database_path = os.path.join(\\n      mount_path, ref_databases.metadata['uniref90'])\\n  mgnify_database_path = os.path.join(\\n      mount_path, ref_databases.metadata['mgnify'])\\n  uniclust30_database_path = os.path.join(\\n      mount_path, ref_databases.metadata['uniclust30'])\\n  bfd_database_path = os.path.join(\\n      mount_path, ref_databases.metadata['bfd'])\\n  small_bfd_database_path = os.path.join(\\n      mount_path, ref_databases.metadata['small_bfd'])\\n  uniprot_database_path = os.path.join(\\n      mount_path, ref_databases.metadata['uniprot'])\\n  pdb70_database_path = os.path.join(\\n      mount_path, ref_databases.metadata['pdb70'])\\n  obsolete_pdbs_path = os.path.join(\\n      mount_path, ref_databases.metadata['pdb_obsolete'])\\n  seqres_database_path = os.path.join(\\n      mount_path, ref_databases.metadata['pdb_seqres'])\\n  mmcif_path = os.path.join(mount_path, ref_databases.metadata['pdb_mmcif'])\\n  os.makedirs(msas.path, exist_ok=True)\\n\\n  features_dict, msas_metadata = run_data_pipeline(\\n      fasta_path=sequence.path,\\n      run_multimer_system=run_multimer_system,\\n      use_small_bfd=use_small_bfd,\\n      uniref90_database_path=uniref90_database_path,\\n      mgnify_database_path=mgnify_database_path,\\n      bfd_database_path=bfd_database_path,\\n      small_bfd_database_path=small_bfd_database_path,\\n      uniclust30_database_path=uniclust30_database_path,\\n      uniprot_database_path=uniprot_database_path,\\n      pdb70_database_path=pdb70_database_path,\\n      obsolete_pdbs_path=obsolete_pdbs_path,\\n      seqres_database_path=seqres_database_path,\\n      mmcif_path=mmcif_path,\\n      max_template_date=max_template_date,\\n      msa_output_path=msas.path,\\n      features_output_path=features.path,\\n  )\\n\\n  features.metadata['category'] = 'features'\\n  if run_multimer_system:\\n    features.metadata['final_dedup_msa_size'] = int(\\n        features_dict['num_alignments'])\\n  else:\\n    features.metadata['final_dedup_msa_size'] = int(\\n        features_dict['num_alignments'][0])\\n    features.metadata['total_number_templates'] = int(\\n        features_dict['template_domain_names'].shape[0])\\n  msas.metadata = msas_metadata\\n\\n  t1 = time.time()\\n  logging.info(f'Data pipeline completed. Elapsed time: {t1-t0}')\\n\\n\"], \"args\": [\"--executor_input\", \"{{$.json_escape[1]}}\", \"--function_to_execute\", \"data_pipeline\"]}, \"disk_spec\": {\"boot_disk_type\": \"pd-ssd\", \"boot_disk_size_gb\": 100}, \"nfs_mounts\": [{\"server\": \"10.130.0.2\", \"path\": \"/datasets\", \"mountPoint\": \"/mnt/nfs/alphafold\"}]}]"
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "Prepare Features"
            }
          },
          "importer": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-importer"
            },
            "inputs": {
              "parameters": {
                "uri": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "gs://jk-af-dev-bucket"
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "Model parameters"
            }
          },
          "importer-2": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-importer-2"
            },
            "inputs": {
              "parameters": {
                "uri": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "/mnt/nfs/alphafold"
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "Reference databases"
            }
          },
          "predict-relax": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-predict-relax"
            },
            "dependentTasks": [
              "configure-run",
              "data-pipeline",
              "importer"
            ],
            "inputs": {
              "artifacts": {
                "model_features": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "features",
                    "producerTask": "data-pipeline"
                  }
                },
                "model_params": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "artifact",
                    "producerTask": "importer"
                  }
                }
              },
              "parameters": {
                "num_ensemble": {
                  "taskOutputParameter": {
                    "outputParameterKey": "num_ensemble",
                    "producerTask": "configure-run"
                  }
                },
                "prediction_runners": {
                  "taskOutputParameter": {
                    "outputParameterKey": "model_runners",
                    "producerTask": "configure-run"
                  }
                },
                "run_multimer_system": {
                  "taskOutputParameter": {
                    "outputParameterKey": "run_multimer_system",
                    "producerTask": "configure-run"
                  }
                },
                "run_relax": {
                  "componentInputParameter": "is_run_relax"
                }
              }
            },
            "taskInfo": {
              "name": "Predict/Relax"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "is_run_relax": {
            "type": "STRING"
          },
          "max_template_date": {
            "type": "STRING"
          },
          "model_preset": {
            "type": "STRING"
          },
          "num_multimer_predictions_per_model": {
            "type": "INT"
          },
          "project": {
            "type": "STRING"
          },
          "region": {
            "type": "STRING"
          },
          "sequence_path": {
            "type": "STRING"
          },
          "use_small_bfd": {
            "type": "STRING"
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.13"
  },
  "runtimeConfig": {
    "parameters": {
      "is_run_relax": {
        "stringValue": "True"
      },
      "model_preset": {
        "stringValue": "monomer"
      },
      "num_multimer_predictions_per_model": {
        "intValue": "5"
      },
      "use_small_bfd": {
        "stringValue": "True"
      }
    }
  }
}